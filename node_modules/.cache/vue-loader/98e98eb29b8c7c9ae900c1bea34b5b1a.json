{"remainingRequest":"/home/hitesh/work/vue/furniture-vue/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/hitesh/work/vue/furniture-vue/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/hitesh/work/vue/furniture-vue/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/hitesh/work/vue/furniture-vue/src/components/Navbar.vue?vue&type=template&id=41458b80&scoped=true&","dependencies":[{"path":"/home/hitesh/work/vue/furniture-vue/src/components/Navbar.vue","mtime":1644642246248},{"path":"/home/hitesh/work/vue/furniture-vue/node_modules/cache-loader/dist/cjs.js","mtime":1644642244904},{"path":"/home/hitesh/work/vue/furniture-vue/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1644642244488},{"path":"/home/hitesh/work/vue/furniture-vue/node_modules/cache-loader/dist/cjs.js","mtime":1644642244904},{"path":"/home/hitesh/work/vue/furniture-vue/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1644642244488}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}