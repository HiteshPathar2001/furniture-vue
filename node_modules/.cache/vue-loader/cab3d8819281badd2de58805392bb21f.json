{"remainingRequest":"/home/fenil/work/projects/vue/furniture-vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/fenil/work/projects/vue/furniture-vue/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/fenil/work/projects/vue/furniture-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fenil/work/projects/vue/furniture-vue/src/components/navbar.vue?vue&type=template&id=688b5e20&scoped=true&","dependencies":[{"path":"/home/fenil/work/projects/vue/furniture-vue/src/components/navbar.vue","mtime":1644297366888},{"path":"/home/fenil/work/projects/vue/furniture-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fenil/work/projects/vue/furniture-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/fenil/work/projects/vue/furniture-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fenil/work/projects/vue/furniture-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}